#!/bin/bash

# This script is based on https://unix.stackexchange.com/revisions/480191/9.
# Source: https://gist.github.com/dullage/7e7f7669ade208885314f83b1b3d6999/d5cd2f3dc558578fc009dae38f2a58762ec84531

# Recommended SIZE setting for different drives:
#   (SATA) SSD: 1024
#   (ANY) HDD: 256
#   (High End NVME) SSD: 4096
#   (Low-Mid End NVME) SSD: 1024

command -v fio >/dev/null 2>&1 || { echo >&2 "Package 'fio' not installed. Aborting."; exit 1; }
command -v jq >/dev/null 2>&1 || { echo >&2 "Package 'jq' not installed. Aborting."; exit 1; }

LOOPS=5 # How many times to run each test
SIZE=1024 # Size of each test, multiples of 32 recommended for Q32 tests to give the most accurate results.
WRITEZERO=0 # Set whether to write zeroes or randoms to testfile (random is the default for both fio and crystaldiskmark); dd benchmarks typically only write zeroes which is why there can be a speed difference.

QSIZE=$(($SIZE / 32)) # Size of Q32Seq tests
SIZE+=M
QSIZE+=M

if [ -z $1 ]; then
    TARGET=$HOME
    echo "Defaulting to $TARGET for testing"
else
    TARGET="$1"
    echo "Testing in $TARGET"
fi

echo "Configuration:
  Size = $SIZE
  Loops = $LOOPS
  Write Only Zeroes = $WRITEZERO
Running Benchmark, please wait...
"

fio_args=()
query_string=()
test_names=()

add_test() {
  local type="$1"
  local block_size="$2"
  local queues="$3"
  local threads="$4"
  local name
  local rw1="read"
  local rw2="write"

  block_size=$(numfmt --from=iec --to=iec --format=%.0f "$block_size")
  name="${type}${block_size} Q${queues}T${threads}"

  if [ "$type" == "SEQ" ]; then
    rw1="read"
    rw2="write"
  elif [ "$type" == "RND" ]; then
    rw1="randread"
    rw2="randwrite"
  else
    echo "unsupported type: $type" >&2
    exit 1
  fi

  fio_args+=(--name="${name}read"  --bs="$block_size" --iodepth="$queues" --numjobs="$threads" --rw="$rw1")
  fio_args+=(--name="${name}write" --bs="$block_size" --iodepth="$queues" --numjobs="$threads" --rw="$rw2")

  if [ "$query_string" != "" ]; then
    query_string+=", "
  fi
  query_string+="job_summary(\"$name\")"

  test_names+=("$name")
}

add_test SEQ "$SIZE" 1 1
add_test SEQ 512K 1 1
add_test SEQ "$QSIZE" 32 1
add_test RND 4K 1 1
add_test RND 4K 32 1
add_test RND 4K 8 8

for name in "${test_names[@]}"; do
  echo "$name"
done

exit 0
fio --loops=$LOOPS --size=$SIZE --filename="$TARGET/.fiomark.tmp" --stonewall --ioengine=libaio --direct=1 --zero_buffers=$WRITEZERO --output-format=json --output "$TARGET/.fiomark.txt" \
  --name=Bufread --loops=1 --bs=$SIZE --iodepth=1 --numjobs=1 --rw=readwrite \
  "${fio_args[@]}"

QUERY='def read_bw(name): [.jobs[] | select(.jobname==name+"read").read.bw] | add / 1024 | floor;
       def read_iops(name): [.jobs[] | select(.jobname==name+"read").read.iops] | add | floor;
       def write_bw(name): [.jobs[] | select(.jobname==name+"write").write.bw] | add / 1024 | floor;
       def write_iops(name): [.jobs[] | select(.jobname==name+"write").write.iops] | add | floor;
       def job_summary(name): read_bw(name), read_iops(name), write_bw(name), write_iops(name);'
read -d '\n' -ra V <<< "$(jq "${QUERY}${query_string}" "$TARGET/.fiomark.txt")"

for i in "${!test_names[@]}"; do
  test_name="${test_names[$i]}"

  echo ""
  echo "$test_name Read: ${V[$i * 4 + 0]}MB/s IOPS=${V[$i * 4 + 1]}"
  echo "$test_name Write: ${V[$i * 4 + 2]}MB/s IOPS=${V[$i * 4 + 3]}"
done

rm "$TARGET/.fiomark.tmp"
